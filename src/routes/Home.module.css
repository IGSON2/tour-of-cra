/*<FLEX 1차원 레이아웃>
먼저 Flex 컨테이너를 display:flex 태그로 정의한다
Flex 아이템들은 가로 방향으로 배치되고, 자신이 가진 내용물의 width 만큼만 차지한다.
height는 컨테이너의 높이만큼 늘어납니다.
이후 부속 태그들을 삽입해 주는데 이러한 태그들이 있다.
* flex-direction:(row,column,row-reverse,column-reverse) (메인축의 방향 설정)
* flex-wrap:(nowrap,wrap,wrap-reverse) (컨테이너가 더 이상의 여유 공간이 없을 때, 삐져나갈지 줄바꿈을 할지 결정)
* flex-flow:("direction 인자" + "wrap 인자") (flex-direction과 flex-wrap을 한꺼번에 지정할 수 있음)
* justify-content:(flex-start,flex-end,center,space-between(item_간격),space-around(item_둘레),space-evenly(item_동일둘레)) (justify-메인축 방향으로 정렬하는 방법 결정)
* align-items:(stretch(끝까지늘림),flex-start,flex-end,center,baseline(텍스트라인)) (align-메인의 수직축 방향으로 정렬하는 방법 결정)

<GRID 2차원 레이아웃>
먼저 Grid 컨테이너를 display:grid 태그로 정의한다
이후 부속 태그들을 삽입해 주는데 이러한 태그들이 있다.
* grid-template-row(columns):(*px,*px,.... 또는 *fr,*fr...) (1fr,1fr은 두 아이템을 1:1의 비율로 정렬하겠다는 뜻, px는 고정길이.)
    repeat() 함수를 이용, 1fr,1fr,1fr 일일히 입력하는 대신 repeat(3,1fr)로써 대체할 수 있다.
    repeat() 함수의 첫 인자를 정수가 아닌 'auto-fill'로 받을 수 있는데, 이는 개수를 미리 정하지 않고 설정된 너비가 허용하는 한 최대한 셀을 채우도록 한다.
    minmax() 함수는 minmax(최소길이,최대길이) 인자를 받아 아이템 내부의 내용길이에 따라 아이템 길이를 범위 내에서 조절한다.
    두 함수를 같이 사용하면 grid-template-rows: repeat(auto-fill,minmax(20%,auto)); 형태로 쓸 수 있다.
* (grid-)gap:(row_gap, column_gap) (그리드 셀 사이의 간격을 설정한다. 인자를 하나만 넣으면 row,column 동일하게 설정된다.)
* grid-(column,row):(start_Num / end_Num(생략하면 한칸)) : (Grid 아이템에 적용하는 속성으로, 각 셀들을 열과 행 번호로 범위 지정한다)*/

.container {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
}

.movies {
  display: grid;
  /*ClassName={styles.movies} div의 자식 컴포넌트인 <AllMovie />를 조정*/
  grid-template-columns: repeat(3, minmax(300px, 1fr));
  grid-template-rows: repeat(auto, 1fr);
  /*grid-gap은 자식 컴포넌트들의 row방향과 column방향의 간격을 조정*/
  grid-gap: 100px;
  padding: 50px; /*padding도 margin과 마찬가지로 시계방향, 미지정시 상우하좌 적용*/
  width: 100%; /*자식 컴포넌트인 <AllMovie />들을 담고있는 ClassName={styles.movies} div 또한 ClassName={styles.container} div의 자식태그이다. 부모태그 넓이의 80%만 지정*/
  padding-top: 70px;
}

@media screen and (max-width: 1500px) {
  .movies {
    grid-template-columns: repeat(2, minmax(300px, 1fr));
    width: 100%;
  }
}

@media screen and (max-width: 1000px) {
  .movies {
    grid-template-columns: repeat(1, minmax(auto, 1fr));
    width: 100%;
  }
}

/*<@media 쿼리>
웹을 호출할 디바이스 화면의 해상도에 따라 웹이 반응할 수 있도록 css파일을 라우팅 해주는 도구
@media (조건) {
    스타일(css 코드)
}
조건문에서는 좁은화면 스타일링엔 max-width:X (X미만)로 제한할수 있고
넓은화면 스타일링엔 min-width:X (X초과) 로 제한하여 
@media (max-width:800px){css} 와 같은 방식으로 작성한다.
조건문 속 css코드의 객체 속성중 display를 none으로 지정하면 조건에 따라 컴포넌트를 숨길수도 있다.
미디어 유형으로는 screen(화면), print(인쇄결과물), speech(음성합성장치) 등이 있다.
*/
